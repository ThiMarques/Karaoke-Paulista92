{"ast":null,"code":"import $jFibJ$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport $jFibJ$react from \"react\";\nimport { createContextScope as $jFibJ$createContextScope } from \"@radix-ui/react-context\";\nimport { Primitive as $jFibJ$Primitive } from \"@radix-ui/react-primitive\";\nimport { createRovingFocusGroupScope as $jFibJ$createRovingFocusGroupScope, Root as $jFibJ$Root, Item as $jFibJ$Item } from \"@radix-ui/react-roving-focus\";\nimport { Toggle as $jFibJ$Toggle } from \"@radix-ui/react-toggle\";\nimport { useControllableState as $jFibJ$useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection as $jFibJ$useDirection } from \"@radix-ui/react-direction\";\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst $6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME = 'ToggleGroup';\nconst [$6c1fd9e6a8969628$var$createToggleGroupContext, $6c1fd9e6a8969628$export$d1c7c4bcd9f26dd4] = $jFibJ$createContextScope($6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME, [$jFibJ$createRovingFocusGroupScope]);\nconst $6c1fd9e6a8969628$var$useRovingFocusGroupScope = $jFibJ$createRovingFocusGroupScope();\nconst $6c1fd9e6a8969628$export$af3ec21f6cfb5e30 = /*#__PURE__*/$jFibJ$react.forwardRef((props, forwardedRef) => {\n  const {\n    type: type,\n    ...toggleGroupProps\n  } = props;\n\n  if (type === 'single') {\n    const singleProps = toggleGroupProps;\n    return /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupImplSingle, $jFibJ$babelruntimehelpersesmextends({}, singleProps, {\n      ref: forwardedRef\n    }));\n  }\n\n  if (type === 'multiple') {\n    const multipleProps = toggleGroupProps;\n    return /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupImplMultiple, $jFibJ$babelruntimehelpersesmextends({}, multipleProps, {\n      ref: forwardedRef\n    }));\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${$6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME}\\``);\n});\n/*#__PURE__*/\n\nObject.assign($6c1fd9e6a8969628$export$af3ec21f6cfb5e30, {\n  displayName: $6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst [$6c1fd9e6a8969628$var$ToggleGroupValueProvider, $6c1fd9e6a8969628$var$useToggleGroupValueContext] = $6c1fd9e6a8969628$var$createToggleGroupContext($6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME);\nconst $6c1fd9e6a8969628$var$ToggleGroupImplSingle = /*#__PURE__*/$jFibJ$react.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue: defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n  const [value, setValue] = $jFibJ$useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupValueProvider, {\n    scope: props.__scopeToggleGroup,\n    type: \"single\",\n    value: value ? [value] : [],\n    onItemActivate: setValue,\n    onItemDeactivate: $jFibJ$react.useCallback(() => setValue(''), [setValue])\n  }, /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupImpl, $jFibJ$babelruntimehelpersesmextends({}, toggleGroupSingleProps, {\n    ref: forwardedRef\n  })));\n});\nconst $6c1fd9e6a8969628$var$ToggleGroupImplMultiple = /*#__PURE__*/$jFibJ$react.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue: defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n  const [value1 = [], setValue] = $jFibJ$useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  const handleButtonActivate = $jFibJ$react.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...prevValue, itemValue];\n  }), [setValue]);\n  const handleButtonDeactivate = $jFibJ$react.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return prevValue.filter(value => value !== itemValue);\n  }), [setValue]);\n  return /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupValueProvider, {\n    scope: props.__scopeToggleGroup,\n    type: \"multiple\",\n    value: value1,\n    onItemActivate: handleButtonActivate,\n    onItemDeactivate: handleButtonDeactivate\n  }, /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupImpl, $jFibJ$babelruntimehelpersesmextends({}, toggleGroupMultipleProps, {\n    ref: forwardedRef\n  })));\n});\n/*#__PURE__*/\n\nObject.assign($6c1fd9e6a8969628$export$af3ec21f6cfb5e30, {\n  displayName: $6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst [$6c1fd9e6a8969628$var$ToggleGroupContext, $6c1fd9e6a8969628$var$useToggleGroupContext] = $6c1fd9e6a8969628$var$createToggleGroupContext($6c1fd9e6a8969628$var$TOGGLE_GROUP_NAME);\nconst $6c1fd9e6a8969628$var$ToggleGroupImpl = /*#__PURE__*/$jFibJ$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToggleGroup: __scopeToggleGroup,\n    disabled = false,\n    rovingFocus = true,\n    orientation: orientation,\n    dir: dir,\n    loop = true,\n    ...toggleGroupProps\n  } = props;\n  const rovingFocusGroupScope = $6c1fd9e6a8969628$var$useRovingFocusGroupScope(__scopeToggleGroup);\n  const direction = $jFibJ$useDirection(dir);\n  const commonProps = {\n    role: 'group',\n    dir: direction,\n    ...toggleGroupProps\n  };\n  return /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupContext, {\n    scope: __scopeToggleGroup,\n    rovingFocus: rovingFocus,\n    disabled: disabled\n  }, rovingFocus ? /*#__PURE__*/$jFibJ$react.createElement($jFibJ$Root, $jFibJ$babelruntimehelpersesmextends({\n    asChild: true\n  }, rovingFocusGroupScope, {\n    orientation: orientation,\n    dir: direction,\n    loop: loop\n  }), /*#__PURE__*/$jFibJ$react.createElement($jFibJ$Primitive.div, $jFibJ$babelruntimehelpersesmextends({}, commonProps, {\n    ref: forwardedRef\n  }))) : /*#__PURE__*/$jFibJ$react.createElement($jFibJ$Primitive.div, $jFibJ$babelruntimehelpersesmextends({}, commonProps, {\n    ref: forwardedRef\n  })));\n});\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst $6c1fd9e6a8969628$var$ITEM_NAME = 'ToggleGroupItem';\nconst $6c1fd9e6a8969628$export$b453109e13abe10b = /*#__PURE__*/$jFibJ$react.forwardRef((props, forwardedRef) => {\n  const valueContext = $6c1fd9e6a8969628$var$useToggleGroupValueContext($6c1fd9e6a8969628$var$ITEM_NAME, props.__scopeToggleGroup);\n  const context = $6c1fd9e6a8969628$var$useToggleGroupContext($6c1fd9e6a8969628$var$ITEM_NAME, props.__scopeToggleGroup);\n  const rovingFocusGroupScope = $6c1fd9e6a8969628$var$useRovingFocusGroupScope(props.__scopeToggleGroup);\n  const pressed = valueContext.value.includes(props.value);\n  const disabled = context.disabled || props.disabled;\n  const commonProps = { ...props,\n    pressed: pressed,\n    disabled: disabled\n  };\n  const ref = $jFibJ$react.useRef(null);\n  return context.rovingFocus ? /*#__PURE__*/$jFibJ$react.createElement($jFibJ$Item, $jFibJ$babelruntimehelpersesmextends({\n    asChild: true\n  }, rovingFocusGroupScope, {\n    focusable: !disabled,\n    active: pressed,\n    ref: ref\n  }), /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupItemImpl, $jFibJ$babelruntimehelpersesmextends({}, commonProps, {\n    ref: forwardedRef\n  }))) : /*#__PURE__*/$jFibJ$react.createElement($6c1fd9e6a8969628$var$ToggleGroupItemImpl, $jFibJ$babelruntimehelpersesmextends({}, commonProps, {\n    ref: forwardedRef\n  }));\n});\n/*#__PURE__*/\n\nObject.assign($6c1fd9e6a8969628$export$b453109e13abe10b, {\n  displayName: $6c1fd9e6a8969628$var$ITEM_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $6c1fd9e6a8969628$var$ToggleGroupItemImpl = /*#__PURE__*/$jFibJ$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeToggleGroup: __scopeToggleGroup,\n    value: value,\n    ...itemProps\n  } = props;\n  const valueContext = $6c1fd9e6a8969628$var$useToggleGroupValueContext($6c1fd9e6a8969628$var$ITEM_NAME, __scopeToggleGroup);\n  const singleProps = {\n    role: 'radio',\n    'aria-checked': props.pressed,\n    'aria-pressed': undefined\n  };\n  const typeProps = valueContext.type === 'single' ? singleProps : undefined;\n  return /*#__PURE__*/$jFibJ$react.createElement($jFibJ$Toggle, $jFibJ$babelruntimehelpersesmextends({}, typeProps, itemProps, {\n    ref: forwardedRef,\n    onPressedChange: pressed => {\n      if (pressed) valueContext.onItemActivate(value);else valueContext.onItemDeactivate(value);\n    }\n  }));\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $6c1fd9e6a8969628$export$be92b6f5f03c0fe9 = $6c1fd9e6a8969628$export$af3ec21f6cfb5e30;\nconst $6c1fd9e6a8969628$export$6d08773d2e66f8f2 = $6c1fd9e6a8969628$export$b453109e13abe10b;\nexport { $6c1fd9e6a8969628$export$d1c7c4bcd9f26dd4 as createToggleGroupScope, $6c1fd9e6a8969628$export$af3ec21f6cfb5e30 as ToggleGroup, $6c1fd9e6a8969628$export$b453109e13abe10b as ToggleGroupItem, $6c1fd9e6a8969628$export$be92b6f5f03c0fe9 as Root, $6c1fd9e6a8969628$export$6d08773d2e66f8f2 as Item };","map":{"version":3,"mappings":"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","names":["TOGGLE_GROUP_NAME","createToggleGroupContext","createToggleGroupScope","createContextScope","createRovingFocusGroupScope","useRovingFocusGroupScope","ToggleGroup","React","forwardRef","props","forwardedRef","type","toggleGroupProps","singleProps","$jFibJ$react","$6c1fd9e6a8969628$var$ToggleGroupImplSingle","ref","multipleProps","$6c1fd9e6a8969628$var$ToggleGroupImplMultiple","Error","Object","displayName","ToggleGroupValueProvider","useToggleGroupValueContext","ToggleGroupImplSingle","value","valueProp","defaultValue","onValueChange","toggleGroupSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$6c1fd9e6a8969628$var$ToggleGroupValueProvider","scope","__scopeToggleGroup","onItemActivate","onItemDeactivate","useCallback","$6c1fd9e6a8969628$var$ToggleGroupImpl","ToggleGroupImplMultiple","toggleGroupMultipleProps","handleButtonActivate","itemValue","prevValue","handleButtonDeactivate","filter","ToggleGroupContext","useToggleGroupContext","ToggleGroupImpl","disabled","rovingFocus","orientation","dir","loop","rovingFocusGroupScope","direction","useDirection","commonProps","role","$6c1fd9e6a8969628$var$ToggleGroupContext","$jFibJ$Root","$jFibJ$babelruntimehelpersesmextends","asChild","$jFibJ$Primitive","div","ITEM_NAME","ToggleGroupItem","valueContext","context","pressed","includes","useRef","$jFibJ$Item","focusable","active","$6c1fd9e6a8969628$var$ToggleGroupItemImpl","ToggleGroupItemImpl","itemProps","undefined","typeProps","$jFibJ$Toggle","onPressedChange","Root","Item"],"sources":["/home/ubuntu/Área de Trabalho/Projetos/All/karaoke/web/node_modules/@radix-ui/react-toggle-group/dist/packages/react/toggle-group/src/ToggleGroup.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Toggle } from '@radix-ui/react-toggle';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToggleGroup';\n\ntype ScopedProps<P> = P & { __scopeToggleGroup?: Scope };\nconst [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype ToggleGroupElement = ToggleGroupImplSingleElement | ToggleGroupImplMultipleElement;\ninterface ToggleGroupSingleProps extends ToggleGroupImplSingleProps {\n  type: 'single';\n}\ninterface ToggleGroupMultipleProps extends ToggleGroupImplMultipleProps {\n  type: 'multiple';\n}\n\nconst ToggleGroup = React.forwardRef<\n  ToggleGroupElement,\n  ToggleGroupSingleProps | ToggleGroupMultipleProps\n>((props, forwardedRef) => {\n  const { type, ...toggleGroupProps } = props;\n\n  if (type === 'single') {\n    const singleProps = toggleGroupProps as ToggleGroupImplSingleProps;\n    return <ToggleGroupImplSingle {...singleProps} ref={forwardedRef} />;\n  }\n\n  if (type === 'multiple') {\n    const multipleProps = toggleGroupProps as ToggleGroupImplMultipleProps;\n    return <ToggleGroupImplMultiple {...multipleProps} ref={forwardedRef} />;\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${TOGGLE_GROUP_NAME}\\``);\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupValueContextValue = {\n  type: 'single' | 'multiple';\n  value: string[];\n  onItemActivate(value: string): void;\n  onItemDeactivate(value: string): void;\n};\n\nconst [ToggleGroupValueProvider, useToggleGroupValueContext] =\n  createToggleGroupContext<ToggleGroupValueContextValue>(TOGGLE_GROUP_NAME);\n\ntype ToggleGroupImplSingleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplSingleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the item that is pressed.\n   */\n  value?: string;\n  /**\n   * The value of the item that is pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the value of the toggle group changes.\n   */\n  onValueChange?(value: string): void;\n}\n\nconst ToggleGroupImplSingle = React.forwardRef<\n  ToggleGroupImplSingleElement,\n  ToggleGroupImplSingleProps\n>((props: ScopedProps<ToggleGroupImplSingleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"single\"\n      value={value ? [value] : []}\n      onItemActivate={setValue}\n      onItemDeactivate={React.useCallback(() => setValue(''), [setValue])}\n    >\n      <ToggleGroupImpl {...toggleGroupSingleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\ntype ToggleGroupImplMultipleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplMultipleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the items that are pressed.\n   */\n  value?: string[];\n  /**\n   * The value of the items that are pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the toggle group changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst ToggleGroupImplMultiple = React.forwardRef<\n  ToggleGroupImplMultipleElement,\n  ToggleGroupImplMultipleProps\n>((props: ScopedProps<ToggleGroupImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleButtonActivate = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleButtonDeactivate = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"multiple\"\n      value={value}\n      onItemActivate={handleButtonActivate}\n      onItemDeactivate={handleButtonDeactivate}\n    >\n      <ToggleGroupImpl {...toggleGroupMultipleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupContextValue = { rovingFocus: boolean; disabled: boolean };\n\nconst [ToggleGroupContext, useToggleGroupContext] =\n  createToggleGroupContext<ToggleGroupContextValue>(TOGGLE_GROUP_NAME);\n\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToggleGroupImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToggleGroupImplProps extends PrimitiveDivProps {\n  /**\n   * Whether the group is disabled from user interaction.\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * Whether the group should maintain roving focus of its buttons.\n   * @defaultValue true\n   */\n  rovingFocus?: boolean;\n  loop?: RovingFocusGroupProps['loop'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst ToggleGroupImpl = React.forwardRef<ToggleGroupImplElement, ToggleGroupImplProps>(\n  (props: ScopedProps<ToggleGroupImplProps>, forwardedRef) => {\n    const {\n      __scopeToggleGroup,\n      disabled = false,\n      rovingFocus = true,\n      orientation,\n      dir,\n      loop = true,\n      ...toggleGroupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);\n    const direction = useDirection(dir);\n    const commonProps = { role: 'group', dir: direction, ...toggleGroupProps };\n    return (\n      <ToggleGroupContext scope={__scopeToggleGroup} rovingFocus={rovingFocus} disabled={disabled}>\n        {rovingFocus ? (\n          <RovingFocusGroup.Root\n            asChild\n            {...rovingFocusGroupScope}\n            orientation={orientation}\n            dir={direction}\n            loop={loop}\n          >\n            <Primitive.div {...commonProps} ref={forwardedRef} />\n          </RovingFocusGroup.Root>\n        ) : (\n          <Primitive.div {...commonProps} ref={forwardedRef} />\n        )}\n      </ToggleGroupContext>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'ToggleGroupItem';\n\ntype ToggleGroupItemElement = ToggleGroupItemImplElement;\ninterface ToggleGroupItemProps extends Omit<ToggleGroupItemImplProps, 'pressed'> {}\n\nconst ToggleGroupItem = React.forwardRef<ToggleGroupItemElement, ToggleGroupItemProps>(\n  (props: ScopedProps<ToggleGroupItemProps>, forwardedRef) => {\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);\n    const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);\n    const pressed = valueContext.value.includes(props.value);\n    const disabled = context.disabled || props.disabled;\n    const commonProps = { ...props, pressed, disabled };\n    const ref = React.useRef<HTMLDivElement>(null);\n    return context.rovingFocus ? (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={pressed}\n        ref={ref}\n      >\n        <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    ) : (\n      <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n    );\n  }\n);\n\nToggleGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupItemImplElement = React.ElementRef<typeof Toggle>;\ntype ToggleProps = Radix.ComponentPropsWithoutRef<typeof Toggle>;\ninterface ToggleGroupItemImplProps extends Omit<ToggleProps, 'defaultPressed' | 'onPressedChange'> {\n  /**\n   * A string value for the toggle group item. All items within a toggle group should use a unique value.\n   */\n  value: string;\n}\n\nconst ToggleGroupItemImpl = React.forwardRef<ToggleGroupItemImplElement, ToggleGroupItemImplProps>(\n  (props: ScopedProps<ToggleGroupItemImplProps>, forwardedRef) => {\n    const { __scopeToggleGroup, value, ...itemProps } = props;\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);\n    const singleProps = { role: 'radio', 'aria-checked': props.pressed, 'aria-pressed': undefined };\n    const typeProps = valueContext.type === 'single' ? singleProps : undefined;\n    return (\n      <Toggle\n        {...typeProps}\n        {...itemProps}\n        ref={forwardedRef}\n        onPressedChange={(pressed) => {\n          if (pressed) {\n            valueContext.onItemActivate(value);\n          } else {\n            valueContext.onItemDeactivate(value);\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ToggleGroup;\nconst Item = ToggleGroupItem;\n\nexport {\n  createToggleGroupScope,\n  //\n  ToggleGroup,\n  ToggleGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { ToggleGroupSingleProps, ToggleGroupMultipleProps, ToggleGroupItemProps };\n"]},"metadata":{},"sourceType":"module"}